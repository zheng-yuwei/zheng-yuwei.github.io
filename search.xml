<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker安装Caffe</title>
      <link href="/2019/07/30/docker%E5%AE%89%E8%A3%85Caffe/"/>
      <url>/2019/07/30/docker%E5%AE%89%E8%A3%85Caffe/</url>
      
        <content type="html"><![CDATA[<p>先安装以下软件：<br><code>cuda</code>, <code>cudnn</code>, <code>openblas</code>, <code>protobuf</code>, <code>glog</code>, <code>gflags</code>, <code>hdf5</code>,<code>snappy</code>, <code>leveldb</code>, <code>boost(+python)</code>, <code>opencv(+python)</code>，<code>doxygen</code>，<code>lmdb</code>；</p><p>由于华为云提供包含cuda和cudnn的docker镜像，所以不用安装这两个。同时由于不能改变镜像中的<code>/usr</code>文件夹，所以最好不要通过apt安装以上依赖库。（华为云提供docker时的要求，否则用apt安装是最方便、最好的！！！）</p><a id="more"></a><h2 id="启动docker镜像"><a href="#启动docker镜像" class="headerlink" title="启动docker镜像"></a>启动docker镜像</h2><p>下载华为云docker镜像压缩包（<code>custom-gpu-cuda9-cudnn7-inner-moxing-cp36.tar</code>）后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 加载镜像并重命名</span><br><span class="line">docker load -i 镜像压缩包文件名称</span><br><span class="line">docker images|grep dls</span><br><span class="line">docker tag #image-id basic-caffe:1.0.0</span><br><span class="line">docker images|grep dls</span><br><span class="line">docker rmi dls.io/eiwizard/custom-gpu-cuda9-inner-moxing-cp36:1.1</span><br><span class="line">docker images|grep basic-caffe</span><br></pre></td></tr></table></figure><p>建立文件夹software，用以放置安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 运行镜像，退出不关</span><br><span class="line">docker run --name test-basic-caffe -it #image-id bash</span><br><span class="line"># root@b0a4a7125b7f:/#</span><br><span class="line"># 其中 b0a4a7125b7f 为 container-id</span><br><span class="line"># 镜像里包含了cuda, cudnn, python3.6</span><br><span class="line">nvcc --version</span><br><span class="line">find / -name *cudnn*</span><br><span class="line">python --version</span><br><span class="line">Ctrl+P+Q</span><br><span class="line"># 查看运行容器，重新进入容器</span><br><span class="line">docker ps -a|grep test-basic-caffe</span><br><span class="line">docker attach #container-id</span><br><span class="line">cd /home</span><br><span class="line">mkdir software</span><br><span class="line">cd software</span><br><span class="line">Ctrl+P+Q</span><br></pre></td></tr></table></figure><p>docker退出及重新启动进入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker里#exit</span><br><span class="line">docker外#docker start -ia #container-id</span><br></pre></td></tr></table></figure><h2 id="安装caffe依赖库"><a href="#安装caffe依赖库" class="headerlink" title="安装caffe依赖库"></a>安装caffe依赖库</h2><p>1.下载并拷贝各个压缩包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker cp boost_1_68_0.tar.gz b0a4a7125b7f:/home/software</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">docker attach #docker-id</span><br><span class="line">ls /home/software</span><br></pre></td></tr></table></figure><p>2.安装各个依赖库：</p><h3 id="安装zlib-libpng-jpegsrc-v9c："><a href="#安装zlib-libpng-jpegsrc-v9c：" class="headerlink" title="安装zlib, libpng, jpegsrc.v9c："></a>安装<code>zlib, libpng, jpegsrc.v9c</code>：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># zlib</span><br><span class="line">cd /home/software/zlib-1.2.11</span><br><span class="line">./configure --prefix=/home/software/zlib-1.2.11-install</span><br><span class="line">make -j &amp;&amp; make install</span><br><span class="line"># libpng</span><br><span class="line">export LDFLAGS=&quot;-L/home/software/zlib-1.2.11-install/lib&quot;</span><br><span class="line">export CPPFLAGS=&quot;-I/home/software/zlib-1.2.11-install/include&quot;</span><br><span class="line">cd /home/software/libpng-1.6.37</span><br><span class="line">./configure --prefix=/home/software/libpng-1.6.37-install</span><br><span class="line">make -j &amp;&amp; make install</span><br><span class="line"># jpeg-9c</span><br><span class="line">cd /home/software/jpeg-9c</span><br><span class="line">./configure --prefix=/home/software/jpeg-9c-install</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/cmake-3.15.0-rc3</span><br><span class="line">./configure --system-curl --prefix=/home/software/cmake-3.15.0-rc3-install -- -DCMAKE_USE_OPENSSL=ON -DZLIB_LIBRARY=/home/software/zlib-1.2.11-install/lib/libz.so -DZLIB_INCLUDE_DIR=/home/software/zlib-1.2.11-install/include</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>在<code>/root</code>下的<code>vi .bashrc</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/software/cmake-3.15.0-rc3-install/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/home/software/cmake-3.15.0-rc3-install/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p>然后执行<code>source .bashrc &amp;&amp; cmake</code>。</p><h3 id="安装openblas"><a href="#安装openblas" class="headerlink" title="安装openblas"></a>安装openblas</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/OpenBLAS-0.3.6</span><br><span class="line">make CC=gcc FC=gfortran</span><br><span class="line">make PREFIX=/home/software/OpenBLAS-0.3.6-install install</span><br><span class="line">cd /home/software/OpenBLAS-0.3.6-install/lib</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h3 id="安装protobuf"><a href="#安装protobuf" class="headerlink" title="安装protobuf"></a>安装protobuf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/protobuf-2.6.1</span><br><span class="line">./configure --prefix=/home/software/protobuf-2.6.1-install</span><br><span class="line">make check</span><br><span class="line">make -j</span><br><span class="line">make install</span><br><span class="line">cd /home/software/protobuf-2.6.1-install/bin</span><br><span class="line">./protoc --version</span><br></pre></td></tr></table></figure><h3 id="安装snappy"><a href="#安装snappy" class="headerlink" title="安装snappy"></a>安装snappy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/snappy-1.1.7</span><br><span class="line">mkdir build</span><br><span class="line">cd build &amp;&amp; cmake -DCMAKE_INSTALL_PREFIX=/home/software/snappy-1.1.7-install ..</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装leveldb"><a href="#安装leveldb" class="headerlink" title="安装leveldb"></a>安装leveldb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/leveldb-1.22</span><br><span class="line">mkdir -p build &amp;&amp; cd build</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/home/software/leveldb-1.22-install -DBUILD_SHARED_LIBS=ON ..</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装glog"><a href="#安装glog" class="headerlink" title="安装glog"></a>安装glog</h3><p>需要先安装<code>libtool</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/libtool-2.4.6</span><br><span class="line">./configure --prefix=/home/software/libtool-2.4.6-install</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>在<code>/root</code>下的<code>vi .bashrc</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export CMAKE_PATH=/home/software/cmake-3.15.0-rc3-install</span><br><span class="line">export LIBTOOL_PATH=/home/software/libtool-2.4.6-install</span><br><span class="line">export PATH=$LIBTOOL_PATH/bin:$CMAKE_PATH/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=$LIBTOOL_PATH/lib:$CMAKE_PATH/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p>然后执行<code>source .bashrc &amp;&amp; cmake</code>以及<code>cp /home/software/libtool-2.4.6-install/share/aclocal/* /usr/share/aclocal/</code>（原因就是<code>aclocal</code>与<code>libtool</code>没有安装在一个相同目录下面，而<code>aclocal</code>是去默认安装目录 <code>/usr/share/aclocal</code> 下面搜索所有的<code>.m4</code>文件找所定义的宏，所以自定义安装后要copy到一起）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/glog-0.4.0</span><br><span class="line">aclocal -I m4</span><br><span class="line">./autogen.sh &amp;&amp; ./configure --prefix=/home/software/glog-0.4.0-install &amp;&amp; make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装gflags"><a href="#安装gflags" class="headerlink" title="安装gflags"></a>安装gflags</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/gflags-2.2.0</span><br><span class="line">mkdir build</span><br><span class="line">cd build/</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/software/gflags-2.2.0-install -DBUILD_SHARED_LIBS=ON ..</span><br><span class="line">make -j</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装hdf5"><a href="#安装hdf5" class="headerlink" title="安装hdf5"></a>安装hdf5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（源码包下载太慢了）</span><br><span class="line">cd /home/software/hdf5-1.8.18</span><br><span class="line">./configure --prefix=/home/software/hdf5-1.8.18-install &amp;&amp; make -j &amp;&amp; make install</span><br><span class="line">或者</span><br><span class="line">conda install -c anaconda hdf5==1.8.18</span><br></pre></td></tr></table></figure><h3 id="安装boost-python"><a href="#安装boost-python" class="headerlink" title="安装boost(+python)"></a>安装boost(+python)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/boost_1_68_0</span><br><span class="line">vi tools/build/src/tools/python.jam</span><br></pre></td></tr></table></figure><p>修改其中547行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">includes ?= $(prefix)/include/python$(version) ; -&gt; includes ?= $(prefix)/include/python$(version)m ;</span><br></pre></td></tr></table></figure><p>然后指定python3路径及版本，安装<code>boost</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bootstrap.sh --with-python=/root/miniconda3/bin/python --with-python-version=3.6 --with-python-root=/root/miniconda3 --prefix=/home/software/boost_1_68_0-install</span><br><span class="line">./b2 install -a --with=all</span><br><span class="line">./b2 --with-python --buildid=3</span><br></pre></td></tr></table></figure><p>建立软连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/software/boost_1_68_0-install/lib/libboost_python36.so.1.68.0 /home/software/boost_1_68_0-install/lib/libboost_python3.so</span><br></pre></td></tr></table></figure><h3 id="安装lmdb"><a href="#安装lmdb" class="headerlink" title="安装lmdb"></a>安装lmdb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/lmdb-LMDB_0.9.23/libraries/liblmdb</span><br><span class="line">make -j</span><br><span class="line">mkdir -p /home/software/lmdb-LMDB_0.9.23-install/include</span><br><span class="line">mkdir -p /home/software/lmdb-LMDB_0.9.23-install/lib</span><br><span class="line">mkdir -p /home/software/lmdb-LMDB_0.9.23-install/bin</span><br><span class="line">for f in mdb_stat mdb_copy mdb_dump mdb_load; do cp $f /home/software/lmdb-LMDB_0.9.23-install/bin; done</span><br><span class="line">for f in liblmdb.a liblmdb.so; do cp $f /home/software/lmdb-LMDB_0.9.23-install/lib; done</span><br><span class="line">for f in lmdb.h; do cp $f /home/software/lmdb-LMDB_0.9.23-install/include; done</span><br></pre></td></tr></table></figure><h3 id="安装doxygen"><a href="#安装doxygen" class="headerlink" title="安装doxygen"></a>安装doxygen</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/doxygen-Release_1_8_15</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/home/software/doxygen-Release_1_8_15-install ..</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装opencv-contribu-python"><a href="#安装opencv-contribu-python" class="headerlink" title="安装opencv(+contribu+python)"></a>安装opencv(+contribu+python)</h3><p>由于<code>opencv</code>安装依赖<code>protobuf</code>，所以要找对应<code>opencv</code>安装版本的<code>protobuf</code>版本（我是<code>opencv-3.4.4</code>，对应<code>protobuf-3.5.1</code>），所以先conda安装（会升级Python版本）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge protobuf==3.5.1</span><br></pre></td></tr></table></figure><p>需要先下载<code>opencv</code>和<code>opencv-contrib</code>的包，解压然后按照：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/opencv-3.4.4</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_opencv_world=ON \</span><br><span class="line">      -D CMAKE_INSTALL_PREFIX=/home/software/opencv-3.4.4-install/ -D INSTALL_C_EXAMPLES=OFF \</span><br><span class="line">      -D OPENCV_EXTRA_MODULES_PATH=/home/software/opencv_contrib-3.4.4/modules \</span><br><span class="line">      -D OPENCV_ENABLE_NONFREE=ON -D BUILD_EXAMPLES=OFF -D WITH_FFMPEG=0 -D WITH_TIFF=OFF \</span><br><span class="line">      -D WITH_CUDA=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 \</span><br><span class="line">      -D WITH_CUBLAS=ON -D WITH_LAPACK=OFF -D WITH_GTK=OFF -D WITH_GTK_2_X=OFF -D WITH_MATLAB=OFF -D WITH_QT=OFF \</span><br><span class="line">      -D CUDA_NVCC_FLAGS=&quot;-D_FORCE_INLINES&quot; -D ENABLE_CXX11=1 \</span><br><span class="line">      -D BUILD_opencv_python3=ON -D BUILD_opencv_python2=ON \</span><br><span class="line">      -D WITH_PROTOBUF=ON -D BUILD_PROTOBUF=OFF -D -BUILD_LIBPROTOBUF_FROM_SOURCES=OFF -D PROTOBUF_UPDATE_FILES=OFF \</span><br><span class="line">      -D ENABLE_PRECOMPILED_HEADERS=ON -D BLAS=Open \</span><br><span class="line">      -D Protobuf_INCLUDE_DIR=/home/software/protobuf-3.5.1-install/include \</span><br><span class="line">      -D Protobuf_INCLUDE_DIRS=/home/software/protobuf-3.5.1-install/include \</span><br><span class="line">      -D Protobuf_LIBRARIES=&apos;/home/software/protobuf-3.5.1-install/lib/libprotobuf.so;-lpthread&apos; \</span><br><span class="line">      -D Protobuf_LIBRARY=/home/software/protobuf-3.5.1-install/lib/libprotobuf.so \</span><br><span class="line">      -D Protobuf_LIBRARY_DEBUG=/home/software/protobuf-3.5.1-install/lib/libprotobuf.so \</span><br><span class="line">      -D Protobuf_LITE_LIBRARIES=/home/software/protobuf-3.5.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">      -D Protobuf_LITE_LIBRARY=/home/software/protobuf-3.5.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">      -D Protobuf_LITE_LIBRARY_DEBUG=/home/software/protobuf-3.5.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">      -D Protobuf_PROTOC_EXECUTABLE=/home/software/protobuf-3.5.1-install/bin/protoc \</span><br><span class="line">      -D Protobuf_PROTOC_LIBRARIES=/home/software/protobuf-3.5.1-install/lib/libprotoc.so \</span><br><span class="line">      -D Protobuf_PROTOC_LIBRARY=/home/software/protobuf-3.5.1-install/lib/libprotoc.so \</span><br><span class="line">      -D Protobuf_PROTOC_LIBRARY_DEBUG=/home/software/protobuf-3.5.1-install/lib/libprotoc.so \</span><br><span class="line">      -D PYTHON3_EXECUTABLE=/root/miniconda3/bin/python \</span><br><span class="line">      -D PYTHON3_INCLUDE_DIR=/root/miniconda3/include/python3.6m \</span><br><span class="line">      -D PYTHON3_LIBRARY=/root/miniconda3/lib/libpython3.6m.so \</span><br><span class="line">      -D PYTHON3_NUMPY_INCLUDE_DIRS=/root/miniconda3/lib/python3.6/site-packages/numpy/core/include \</span><br><span class="line">      -D INSTALL_PYTHON_EXAMPLES=OFF -D OPENCV_SKIP_PYTHON_LOADER=ON \</span><br><span class="line">      -D ZLIB_LIBRARY=/home/software/zlib-1.2.11-install/lib/libz.so \</span><br><span class="line">      -D ZLIB_INCLUDE_DIR=/home/software/zlib-1.2.11-install/include \</span><br><span class="line">      -D PNG_LIBRARY=/home/software/libpng-1.6.37-install/lib/libpng.so \</span><br><span class="line">      -D PNG_PNG_INCLUDE_DIR=/home/software/libpng-1.6.37-install/include \</span><br><span class="line">      -D JPEG_LIBRARY=/home/software/jpeg-9c-install/lib/libjpeg.so \</span><br><span class="line">      -D JPEG_INCLUDE_DIR=/home/software/jpeg-9c-install/include \</span><br><span class="line">      -D HDF5_LIBRARIES=/root/miniconda3/lib/libhdf5_cpp.so \</span><br><span class="line">      -D HDF5_INCLUDE_DIRS=/root/miniconda3/include \</span><br><span class="line">      -D GLOG_LIBRARY=/home/software/glog-0.4.0-install/lib/libglog.so \</span><br><span class="line">      -D GLOG_INCLUDE_DIR=/home/software/glog-0.4.0-install/include \</span><br><span class="line">      ..</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果报下载<code>boostdesc_bgm.i</code>等i文件错误，到该<a href="https://github.com/opencv/opencv_contrib/issues/1301" target="_blank" rel="noopener">issue</a>下下载，放到指定路径(修改下载地址为本地file://)，其他下载错误同理。若是hash验证不通过，则修改对应cmakelist里的hash值为actual值就行。</p><p>要是报c++内部错误，可能是内存炸了，<code>make -j</code>改小点（如<code>make -j4</code>）。</p><p>安装完成后，到安装路径（<code>CMAKE_INSTALL_PREFIX=/home/software/opencv-3.4.4-install</code>）的python目录下，可以发现<code>python-3.6</code>文件夹，里面都有<code>cv2.cpython-36m-x86_64-linux-gnu.so</code>文件，到对应python环境<code>lib/python3.6/site-packages</code>下，建立so文件的软链接（如到<code>/root/miniconda3/lib/python3.6/site-packages</code>下执行:<code>ln -s /home/software/opencv-3.4.4-install/python/python-3.6/cv2.cpython-36m-x86_64-linux-gnu.so /root/miniconda3/lib/python3.6/site-packages/cv2.so</code>）； 最后，检查是否安装成功，也可建立对应的<code>opencv.pc</code>文件，并添加到PATH路径。</p><p><strong>添加所有库路径</strong>，<code>vi /root/.bashrc</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export BOOST_PATH=/home/software/boost_1_68_0-install</span><br><span class="line">export CMAKE_PATH=/home/software/cmake-3.15.0-rc3-install</span><br><span class="line">export DOXYGEN_PATH=/home/software/doxygen-Release_1_8_15-install</span><br><span class="line">export GFLAGS_PATH=/home/software/gflags-2.2.0-install</span><br><span class="line">export GLOG_PATH=/home/software/glog-0.4.0-install</span><br><span class="line">export HDF5_PATH=/home/software/hdf5-1.8.21-install</span><br><span class="line">export JPEG_PATH=/home/software/jpeg-9c-install</span><br><span class="line">export LEVELDB_PATH=/home/software/leveldb-1.22-install</span><br><span class="line">export LIBPNG_PATH=/home/software/libpng-1.6.37-install</span><br><span class="line">export LIBTOOL_PATH=/home/software/libtool-2.4.6-install</span><br><span class="line">export LMDB_PATH=/home/software/lmdb-LMDB_0.9.23-install</span><br><span class="line">export OPENBLAS_PATH=/home/software/OpenBLAS-0.3.6-install</span><br><span class="line">export OPENCV_PATH=/home/software/opencv-3.4.4-install</span><br><span class="line">export PROTOBUF_PATH=/home/software/protobuf-3.5.1-install</span><br><span class="line">export SNAPPY_PATH=/home/software/snappy-1.1.7-install</span><br><span class="line">export ZLIB_PATH=/home/software/zlib-1.2.11-install</span><br><span class="line">export PATH=$DOXYGEN_PATH/bin:$PROTOBUF_PATH/bin:$LIBTOOL_PATH/bin:$CMAKE_PATH/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=$BOOST_PATH/lib:$CMAKE_PATH/lib:$GFLAGS_PATH/lib:$GLOG_PATH/lib:$HDF5_PATH/lib:$JPEG_PATH/lib:$LEVELDB_PATH/lib:$LIBPNG_PATH/lib:$LIBTOOL_PATH/lib:$LMDB_PATH/lib:$OPENBLAS_PATH/lib:$OPENCV_PATH/lib:$PROTOBUF_PATH/lib:$SNAPPY_PATH/lib:$ZLIB_PATH/lib:$LD_LIBRARY_PATH</span><br><span class="line">export C_INCLUDE_PATH=$BOOST_PATH/include:$CMAKE_PATH/include:$GFLAGS_PATH/include:$GLOG_PATH/include:$HDF5_PATH/include:$JPEG_PATH/include:$LEVELDB_PATH/include:$LIBPNG_PATH/include:$LIBTOOL_PATH/include:$LMDB_PATH/include:$OPENBLAS_PATH/include:$OPENCV_PATH/include:$PROTOBUF_PATH/include:$SNAPPY_PATH/include:$ZLIB_PATH/include:$C_INCLUDE_PATH</span><br><span class="line">export CPLUS_INCLUDE_PATH=$BOOST_PATH/include:$CMAKE_PATH/include:$GFLAGS_PATH/include:$GLOG_PATH/include:$HDF5_PATH/include:$JPEG_PATH/include:$LEVELDB_PATH/include:$LIBPNG_PATH/include:$LIBTOOL_PATH/include:$LMDB_PATH/include:$OPENBLAS_PATH/include:$OPENCV_PATH/include:$PROTOBUF_PATH/include:$SNAPPY_PATH/include:$ZLIB_PATH/include:$CPLUS_INCLUDE_PATH</span><br></pre></td></tr></table></figure><h2 id="安装caffe"><a href="#安装caffe" class="headerlink" title="安装caffe"></a>安装caffe</h2><p>把caffe源码库拷贝下来后，有两种编译caffe的方式：</p><ul><li>在caffe目录下直接 <code>make</code>、 <code>make pycaffe</code> 来构建工程caffe的C++库和Python库；</li><li>先<code>mkdir build</code>后，在<code>build</code>文件夹下<code>cmake</code>，然后再<code>make</code>、<code>make pycaffe</code>。</li></ul><h3 id="对于makefile方法"><a href="#对于makefile方法" class="headerlink" title="对于makefile方法"></a>对于makefile方法</h3><p>主要修改<code>Makefile.config</code>文件，主要修改点有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">USE_CUDNN := 1</span><br><span class="line">OPENCV_VERSION := 3</span><br><span class="line">CUDA_DIR := /usr/local/cuda-8.0  # 选择特定的CUDA安装路径</span><br><span class="line"># 选择特定的Python/Numpy安装include/lib目录</span><br><span class="line">PYTHON_INCLUDE := /usr/local/public/anaconda3/envs/caffe_py35/include \</span><br><span class="line">/usr/local/public/anaconda3/envs/caffe_py35/lib/python3.5/site-packages/numpy/core/include</span><br><span class="line">PYTHON_LIBRARIES := boost_python3 python3.5m</span><br><span class="line">PYTHON_LIB := /usr/local/public/anaconda2/envs/caffe_py3.5/lib /usr/local/lib/</span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) $(CUDA_DIR)/lib64 /usr/local/lib \</span><br><span class="line">    /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class="line">USE_NCCL := 1 # 多GPU</span><br></pre></td></tr></table></figure><p>同时，也可修改下Makefile文件里的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</span><br></pre></td></tr></table></figure><h3 id="对于cmake方法"><a href="#对于cmake方法" class="headerlink" title="对于cmake方法"></a>对于cmake方法</h3><p>修改<code>cmake/Dependencies.cmake</code>: 在<code>if(BUILD_python)</code>分支中，<code>if(NOT &quot;${python_version}&quot; VERSION_LESS &quot;3.0.0&quot;)</code>分支中，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(NOT Boost_PYTHON_FOUND)</span><br><span class="line">    find_package(Boost 1.46 COMPONENTS &quot;python3&quot;)</span><br><span class="line">    set(Boost_PYTHON_FOUND $&#123;Boost_PYTHON3_FOUND&#125;)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><p>需改<code>cmake/Cuda.cmake</code>中（具体可以对照GPU型号和支持的架构进行设置修改V100是70）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(Caffe_known_gpu_archs &quot;30 35 50 52 61 70&quot;)</span><br></pre></td></tr></table></figure><p>然后到<code>build</code>文件加下，执行cmake：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cd .. &amp;&amp; rm -r build &amp;&amp; mkdir build &amp;&amp; cd build</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">-D CUDA_TOOLKIT_ROOT_DIR=&quot;/usr/local/cuda&quot; \</span><br><span class="line">-D CUDNN_INCLUDE=&quot;/usr/local/cuda/include&quot; \</span><br><span class="line">-D CUDNN_LIBRARY=&quot;/usr/local/cuda/lib64/libcudnn.so&quot; \</span><br><span class="line">-D CUDA_NVCC_FLAGS=&quot;-D_FORCE_INLINES&quot; -D CMAKE_CXX_FLAGS=&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot; \</span><br><span class="line">-D PYTHON_LIBRARIES=&quot;/root/miniconda3/lib;/usr/local/lib&quot; \</span><br><span class="line">-D PYTHON_INCLUDE_DIR=/root/miniconda3/include/python3.6m/ \</span><br><span class="line">-D PYTHON_EXECUTABLE=/root/miniconda3/bin/python \</span><br><span class="line">-D python_version=3.6 -D BLAS=Open  -D CUDA_ARCH_NAME=All -D CUDA_NVCC_FLAGS=&quot;-D_FORCE_INLINES&quot; \</span><br><span class="line">-D CUDNN_INCLUDE=&quot;/usr/include&quot; -D CUDNN_LIBRARY=&quot;/usr/lib/x86_64-linux-gnu/libcudnn.so&quot; \</span><br><span class="line">-D Protobuf_INCLUDE_DIR=/home/software/protobuf-2.6.1-install/include \</span><br><span class="line">-D Protobuf_LIBRARY_RELEASE=/home/software/protobuf-2.6.1-install/lib/libprotobuf.so \</span><br><span class="line">-D Protobuf_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotobuf.so \</span><br><span class="line">-D Protobuf_LITE_LIBRARY_RELEASE=/home/software/protobuf-2.6.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">-D Protobuf_LITE_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">-D Protobuf_PROTOC_EXECUTABLE=/home/software/protobuf-2.6.1-install/bin/protoc \</span><br><span class="line">-D Protobuf_PROTOC_LIBRARY_RELEASE=/home/software/protobuf-2.6.1-install/lib/libprotoc.so \</span><br><span class="line">-D Protobuf_PROTOC_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotoc.so \</span><br><span class="line">-D PROTOBUF_INCLUDE_DIR=/home/software/protobuf-2.6.1-install/include \</span><br><span class="line">-D PROTOBUF_INCLUDE_DIRS=/home/software/protobuf-2.6.1-install/include \</span><br><span class="line">-D PROTOBUF_LIBRARIES=&apos;/home/software/protobuf-2.6.1-install/lib/libprotobuf.so;-lpthread&apos; \</span><br><span class="line">-D PROTOBUF_LIBRARY=/home/software/protobuf-2.6.1-install/lib/libprotobuf.so \</span><br><span class="line">-D PROTOBUF_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotobuf.so \</span><br><span class="line">-D PROTOBUF_LITE_LIBRARIES=/home/software/protobuf-2.6.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">-D PROTOBUF_LITE_LIBRARY=/home/software/protobuf-2.6.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">-D PROTOBUF_LITE_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">-D PROTOBUF_PROTOC_EXECUTABLE=/home/software/protobuf-2.6.1-install/bin/protoc \</span><br><span class="line">-D PROTOBUF_PROTOC_LIBRARIES=/home/software/protobuf-2.6.1-install/lib/libprotoc.so \</span><br><span class="line">-D PROTOBUF_PROTOC_LIBRARY=/home/software/protobuf-2.6.1-install/lib/libprotoc.so \</span><br><span class="line">-D PROTOBUF_PROTOC_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotoc.so \</span><br><span class="line">-D CMAKE_PREFIX_PATH=&apos;/home/software/boost_1_68_0-install;/home/software/cmake-3.15.0-rc3-install;/home/software/doxygen-Release_1_8_15-install;/home/software/gflags-2.2.0-install;/home/software/glog-0.4.0-install;/home/software/hdf5-1.8.21-install;/home/software/jpeg-9c-install;/home/software/leveldb-1.22-install;/home/software/libpng-1.6.37-install;/home/software/libtool-2.4.6-install;/home/software/lmdb-LMDB_0.9.23-install;/home/software/OpenBLAS-0.3.6-install;/home/software/opencv-3.4.4-install2;/home/software/protobuf-3.5.1-install;/home/software/snappy-1.1.7-install;/home/software/zlib-1.2.11-install/lib&apos; \</span><br><span class="line">-D CMAKE_INSTALL_PREFIX=/home/caffe ..</span><br><span class="line">make -j </span><br><span class="line">make pycaffe</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>Q. 如果的确已经安装protobuf 2.6.1，但还是出现版本不对（older version），可以加入以下编译选项（其实是conda里的protobuf造成的影响）。</p><p>A. 我是将conda中protobuf的头文件的文件夹名由protobuf改为其他名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-D Protobuf_INCLUDE_DIR=/home/software/protobuf-2.6.1-install/include \</span><br><span class="line">-D Protobuf_LIBRARY_RELEASE=/home/software/protobuf-2.6.1-install/lib/libprotobuf.so \</span><br><span class="line">-D Protobuf_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotobuf.so \</span><br><span class="line">-D Protobuf_LITE_LIBRARY_RELEASE=/home/software/protobuf-2.6.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">-D Protobuf_LITE_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotobuf-lite.so \</span><br><span class="line">-D Protobuf_PROTOC_EXECUTABLE=/home/software/protobuf-2.6.1-install/bin/protoc \</span><br><span class="line">-D Protobuf_PROTOC_LIBRARY_RELEASE=/home/software/protobuf-2.6.1-install/lib/libprotoc.so \</span><br><span class="line">-D Protobuf_PROTOC_LIBRARY_DEBUG=/home/software/protobuf-2.6.1-install/lib/libprotoc.so \</span><br></pre></td></tr></table></figure><p>Q. 如果发生protobuf undefined reference的问题？安装glogA. protobuf版本问题，opencv用3.5.1编译，而caffe需要2.6.1，所以依赖不一致。我是把opencv编一个不用protobuf的版本，提供给caffe的。</p><h2 id="保存新镜像"><a href="#保存新镜像" class="headerlink" title="保存新镜像"></a>保存新镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit #container-id basic-caffe:2.0.0</span><br><span class="line">docker save basic-caffe:2.0.0 | gzip &gt; basic-caffe.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Caffe </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型剪枝探索和实现小结</title>
      <link href="/2019/07/26/%E6%A8%A1%E5%9E%8B%E5%89%AA%E6%9E%9D%E6%8E%A2%E7%B4%A2%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%BB%93/"/>
      <url>/2019/07/26/%E6%A8%A1%E5%9E%8B%E5%89%AA%E6%9E%9D%E6%8E%A2%E7%B4%A2%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>探索模型剪枝方面的一些论文研究，并选择进行实现用到目前项目中（实现部分没有放置在当前ppt中）。</p><a id="more"></a><div class="pdf" target="/resource/network_pruning.pdf" height></div>]]></content>
      
      
      
        <tags>
            
            <tag> 模型剪枝 </tag>
            
            <tag> network pruning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对L2正则化、BN层的思考</title>
      <link href="/2019/07/22/%E5%AF%B9L2%E6%AD%A3%E5%88%99%E5%8C%96%E3%80%81BN%E5%B1%82%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/07/22/%E5%AF%B9L2%E6%AD%A3%E5%88%99%E5%8C%96%E3%80%81BN%E5%B1%82%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>对<strong>BN层对网络卷积层权重L2正则化的影响</strong>、<strong>BN层的gamma项正则化作用</strong>、<strong>卷积层权重L2正则化的作用</strong>、<strong>如何更好的调整L2正则项权重、学习率、gamma项权重等超参</strong> 等问题的思考。</p><a id="more"></a><p>涉及的论文：</p><ul><li>主要的思想来源：</li></ul><p><a href="https://arxiv.org/pdf/1706.05350.pdf" target="_blank" rel="noopener">L2 Regularization versus Batch and Weight Normalization</a></p><p><a href="https://arxiv.org/pdf/1809.00846.pdf" target="_blank" rel="noopener">Towards Understanding Regularization in Batch Normalization</a></p><p><a href="https://arxiv.org/pdf/1706.02677.pdf" target="_blank" rel="noopener">Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour</a></p><ul><li>引发</li></ul><p><a href="https://arxiv.org/pdf/1708.06519.pdf" target="_blank" rel="noopener">Learning Efficient Convolutional Networks through Network Slimming</a></p><p><a href="https://arxiv.org/pdf/1707.01213.pdf" target="_blank" rel="noopener">Data-Driven Sparse Structure Selection for Deep Neural Networks</a></p><p>之所以开始这一方面的了解，源于对network pruning方面文章（SSS和network slimming）的阅读：</p><ul><li>Network Slimming：增加 BN层中<script type="math/tex">gamma</script>的正则项，而后根据<script type="math/tex">gamma</script>大小进行剪枝：<script type="math/tex; mode=display">L = \sum_{(x,y)}l(f(x,W),y) + \gamma * \sum_{\gamma \in \Gamma}g(\gamma)</script></li><li>Sparse Structure Selection：直接在group/block/channel后新增一层，该层就只有一个scale factor <script type="math/tex">\gamma</script>,然后增加L1正则项<script type="math/tex">|\gamma|</script>；用加速近端梯度下降求解<script type="math/tex">\gamma</script>（软阈值 + 动量梯度下降）。</li></ul><p>复现的过程中，想到一个问题：无论是对于BN层还是自定义层，在降低<script type="math/tex">\gamma</script>以减小正则项时，都可以通过增加对应的卷积层的权重<script type="math/tex">W</script>，从而实现模型不变而损失函数减少的目的（当然，此时模型的损失函数不包含卷积层的权重衰减正则项的话）。而如果损失函数加入卷积层的权重衰减正则项的话，那么此时其实增加了两个超参：<script type="math/tex">\lambda_{conv}</script>和<script type="math/tex">\lambda_{\gamma}</script>（如果是SSS，则是3个超参）。<script type="math/tex">\lambda_{conv}</script>一般设定为默认值0.0005，而<script type="math/tex">\lambda_{\gamma}</script>则通过调参设置而达到 network slimming 的功效。</p><p>那么，BN层<script type="math/tex">\gamma</script>、卷积层权重<script type="math/tex">W</script>、正则化 这三者的关系，其内涵和对模型优化的影响究竟是咋样的呢？带着这样的问题，开启这一小分支的探索和实现（剪枝ppt后续放出）。</p><h2 id="L2正则化与BN层的关系"><a href="#L2正则化与BN层的关系" class="headerlink" title="L2正则化与BN层的关系"></a>L2正则化与BN层的关系</h2><p>下面是batch size和learning rate的延伸。</p><h2 id="Large-batch-training引发的问题"><a href="#Large-batch-training引发的问题" class="headerlink" title="Large batch training引发的问题"></a>Large batch training引发的问题</h2><h2 id="Linear-Scaling-Rule-batch-size、learning-rate、warm-up的纠葛）"><a href="#Linear-Scaling-Rule-batch-size、learning-rate、warm-up的纠葛）" class="headerlink" title="Linear Scaling Rule (batch size、learning rate、warm-up的纠葛）"></a>Linear Scaling Rule (batch size、learning rate、warm-up的纠葛）</h2><p>Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour</p>]]></content>
      
      
      
        <tags>
            
            <tag> L2正则化 </tag>
            
            <tag> batch normalizatin </tag>
            
            <tag> warm-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GHM论文理解及实现</title>
      <link href="/2019/07/08/GHM%E8%AE%BA%E6%96%87%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/08/GHM%E8%AE%BA%E6%96%87%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>原论文：<a href="https://arxiv.org/abs/1811.05181" target="_blank" rel="noopener">Gradient Harmonized Single-stage Detector</a></p><p>本文主要基于tf.keras讨论分类部分，论文也提出了适用于检测的方法。实验表明具有一定效果，可以尝试，感觉比<a href="https://arxiv.org/abs/1708.02002" target="_blank" rel="noopener">focal loss</a>要好用。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文针对问题：<strong>one-stage的目标检测算法一直存在的正负/难易样本（样本梯度）失衡问题</strong>。</p><p>在one-stage算法中，负样本的数量要远远大于正样本，而且大多数负样本是简单样本（well-classified）；当然，大多正样本也算是简单样本。简单样本的小梯度，通过样本量的增加，量变引起质变，主导了模型的训练过程。focal loss中通过引入<script type="math/tex">\alpha</script>大大降低简单样本的分类损失，以平衡正负/难易样本，但是设计的损失函数<script type="math/tex">L</script>引入两个超参(OHEM只学习困难/loss大的一部分样本，训练有效性降低）：</p><script type="math/tex; mode=display">L = - \sum_{i}^{c} ( \alpha * | p_{i} - p_{i}^{*} |^{\gamma} * p_{i}^{*} * \ln(p_{i}))</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">focal_loss</span><span class="params">(y_truth, y_pred, _)</span>:</span></span><br><span class="line">    epsilon = keras.backend.epsilon()</span><br><span class="line">    y_pred = keras.backend.clip(y_pred, epsilon, <span class="number">1.0</span> - epsilon)</span><br><span class="line">    cross_entropy = -y_truth * keras.backend.log(y_pred)</span><br><span class="line">    <span class="comment"># 这里没有区分正负样本的alpha</span></span><br><span class="line">    weight = alpha * keras.backend.pow(keras.backend.abs(y_truth - y_pred), gamma)</span><br><span class="line">    loss = weight * cross_entropy</span><br><span class="line">    loss = keras.backend.sum(loss, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><p>本论文认为，模型训练过程中，信息/知识的传导靠的是梯度；只不过梯度的大小，表象刚好是样本的难易/正负。也就是说，正负/难易样本的失衡，其实是<strong>梯度的失衡</strong>！所以想让模型学得更好，应该从更本质的<strong>梯度</strong>入手。故提出gradient harmonizing mechanism（GHM），拟解决模型中的梯度失衡问题。</p><h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h2><p>梯度调和机制（gradient harmonized mechanism， GHM）其实就是将不同梯度对损失函数的影响，进行基于密度的平衡。（如果为了简单了解，我们暂且可以把密度理解为样本数量）</p><h3 id="调和机制（harmonized-mechanism）"><a href="#调和机制（harmonized-mechanism）" class="headerlink" title="调和机制（harmonized mechanism）"></a>调和机制（harmonized mechanism）</h3><p>这里把harmonized mechanism翻译为调和机制，其实是调和有取倒数的意思。</p><h4 id="基于类别平衡的损失（class-balanced-loss）"><a href="#基于类别平衡的损失（class-balanced-loss）" class="headerlink" title="基于类别平衡的损失（class-balanced loss）"></a>基于类别平衡的损失（class-balanced loss）</h4><p>可以从样本的类别不平衡来理解：如果有10个类<script type="math/tex">A</script>的样本，2个类<script type="math/tex">B</script>的样本，那么基于类别平衡的损失为：</p><script type="math/tex; mode=display">L = \frac{12}{10} * \sum_{i \in A}(L_{i}) + \frac{12}{2} * \sum_{i \in B}(L_{i})</script><p>其中，10可以理解为类别<script type="math/tex">A</script>的密度，2可以理解为类别<script type="math/tex">B</script>的密度。</p><p>推广到多个类别可得：</p><script type="math/tex; mode=display">L = \sum_{i}^{N}( \frac{N}{M_{i}} * L_{i} )</script><p>其中，<script type="math/tex">N</script>是样本总数，<script type="math/tex">M_{i}</script>是样本<script type="math/tex">i</script>所属的类别的密度，<script type="math/tex">L_{i}</script>是样本<script type="math/tex">i</script>的损失。以上如果取平均损失函数，则需要乘上<script type="math/tex">\frac{1}{N}</script>。</p><h4 id="基于梯度平衡的损失（gradient-balanced-loss）"><a href="#基于梯度平衡的损失（gradient-balanced-loss）" class="headerlink" title="基于梯度平衡的损失（gradient-balanced loss）"></a>基于梯度平衡的损失（gradient-balanced loss）</h4><p>这里，我们将<strong>基于类别的平衡</strong>推广到<strong>基于梯度的平衡</strong>：</p><script type="math/tex; mode=display">L = \sum_{i}^{N}( \frac{N}{GD_{g_{i}}} * L_{g_{i}} )</script><p>其中，<script type="math/tex">N</script>是样本总数，<script type="math/tex">g_{i}</script>是样本<script type="math/tex">i</script>的梯度，<script type="math/tex">GD_{g_{i}}</script>是梯度<script type="math/tex">g_{i}</script>的密度，<script type="math/tex">L_{g_{i}}=L_{i}</script>是样本<script type="math/tex">i</script>的损失。</p><p>也就是说，用样本梯度的密度取倒数，乘上样本损失，便可以平衡不同梯度区域的损失。</p><h3 id="为什么需要调和？"><a href="#为什么需要调和？" class="headerlink" title="为什么需要调和？"></a>为什么需要调和？</h3><p>基于类别的平衡，在实际的数据分析场景中，也要case-by-case分析是否适用。那么，<strong>基于梯度的平衡是否科学</strong>呢？作者给出了下图的解释（图中还包含了cross-entropy和focal-loss的梯度加和方式）：</p><p align="center">    <img src="https://zheng-yuwei.github.io/images/GHM%E8%AE%BA%E6%96%87%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/GHM_insight.jpg"></p><p>最左边的图是样本的梯度分布，梯度小的表示已经被模型学习到的了（容易样本），梯度大的表示模型很难学到（困难样本）。这两种样本，梯度密度都比较大，主导了整个模型的训练方向。而作者认为，学到的了可以不用学了，没有学到的可能是异常样本，也不用学了；我们这时候应该提升模型，学习中间那段梯度密度较小、还有信息可以学习的样本。</p><p>求解出整个样本集梯度的概率密度的调和曲线（1/概率密度，中间那张图），来调和原始的梯度（也就是与左图相乘），得到最终的模型回传梯度（最右边的图）。</p><p>和focal loss和OHEM的比较来看，改进源于更本质的角度——模型的梯度（当然，这里的梯度并不是整个模型的所有参数<script type="math/tex">W</script>构成的梯度，而是简化为最后一层sigmoid回传的梯度；同时也不是指梯度向量，而是梯度向量的L1范数）。</p><p>以上，便是论文的核心理解，接下来掰一掰公式和实现。</p><h2 id="Gradient-Harmonizing-Mechanism-——-GHM-C-Loss"><a href="#Gradient-Harmonizing-Mechanism-——-GHM-C-Loss" class="headerlink" title="Gradient Harmonizing Mechanism —— GHM-C Loss"></a>Gradient Harmonizing Mechanism —— GHM-C Loss</h2><p>原论文主要针对的是sigmoid二分类情况，我泛化为softmax来分析。</p><p>回过头来看一下GHM的损失函数为：</p><script type="math/tex; mode=display">L = \frac{1}{K} * \sum_{i}^{K}( \frac{N}{GD_{g_{i}}} * L_{g_{i}} )</script><p>其中，<script type="math/tex">K</script>是batch size，最重要的部分在于求解<strong>梯度密度<script type="math/tex">GD_{g_{i}}</script></strong>上，论文通过两个机制来近似这个梯度密度：</p><ol><li>将梯度取值区间(0, 1)切割为多个bin，统计不同bin的梯度数量R，作为梯度密度（论文中梯度密度调和参数是<script type="math/tex">\beta_{i}=\frac{N}{GD_{g_{i}}},GD_{g_{i}}=\frac{R_{i}}{\epsilon},\epsilon=\frac{1}{bin}</script>）；</li><li>用逐batch的指数加权移动平均(EMA)来近似总样本下的梯度密度<script type="math/tex">S_{i}^{t}=\alpha S_{i}^{t-1}+(1-\alpha)R_{i}^{t}</script>。</li></ol><p>cross-entropy的损失函数是：</p><script type="math/tex; mode=display">L = -\sum_{i}^{c}(p_{i}^{*} * \ln(p_{i}))</script><p>其中，<script type="math/tex">p_{i}^{*}</script>指真实类别概率，预测类别概率为<script type="math/tex">p_{i}=\frac{e^{z_{i}}}{\sum_{j}e^{z_{i}}},z_{i}=\sum_{k}(w_{k}*x_{k})</script>； 代入计算梯度得 （与论文中针对sigmoid的推导结果是一致的）：</p><script type="math/tex; mode=display">\frac{\partial L}{\partial x_{i}} = p_{i} - p_{i}^{*}</script><p> 综上，可得求解GHM-C Loss：</p><ol><li><script type="math/tex">|\frac{\partial L}{\partial x_{i}}| = |p_{i} - p_{i}^{*}|</script>；</li><li>统计<script type="math/tex">R(g)</script>（<script type="math/tex">g=|p-p^{*}|</script> 所在梯度区间<script type="math/tex">[(i-1)*\epsilon, i*\epsilon]</script>的样本数）；</li><li>指数加权移动平均计算<script type="math/tex">S(g)</script>；</li><li>计算梯度密度 <script type="math/tex">GD(g) = \frac{S(g)}{\epsilon} = S(g) * M</script>；</li><li>计算损失 <script type="math/tex">L = \sum_{i}(\frac{I(x_{i})}{GD(g_i)})</script>。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_categorical_ghm_loss</span><span class="params">(bins=<span class="number">30</span>, momentum=<span class="number">0.75</span>)</span>:</span></span><br><span class="line">    <span class="string">""" 返回多分类 GHM 损失函数：</span></span><br><span class="line"><span class="string">            把每个区间上的梯度做平均，也就是说把梯度拉平，回推到公式上等价于把loss做平均</span></span><br><span class="line"><span class="string">    Formula:</span></span><br><span class="line"><span class="string">        loss = sum(crossentropy_loss(p_i,p*_i) / GD(g_i))</span></span><br><span class="line"><span class="string">        GD(g) = S_ind(g) / delta = S_ind(g) * M</span></span><br><span class="line"><span class="string">        S_ind(g) = momentum * S_ind(g) + (1 - momentum) * R_ind(g)</span></span><br><span class="line"><span class="string">        R_ind(g)是 g=|p-p*| 所在梯度区间[(i-1)delta, i*delta]的样本数</span></span><br><span class="line"><span class="string">        M = 1/delta，这个是个常数，理论上去掉只有步长影响</span></span><br><span class="line"><span class="string">    Parameters: （论文默认）</span></span><br><span class="line"><span class="string">        bins -- 区间个数，default 30</span></span><br><span class="line"><span class="string">        momentum -- 使用移动平均来求区间内样本数，动量部分系数，论文说不敏感</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 区间边界</span></span><br><span class="line">    edges = np.array([i/bins <span class="keyword">for</span> i <span class="keyword">in</span> range(bins + <span class="number">1</span>)])</span><br><span class="line">    edges = np.expand_dims(np.expand_dims(edges, axis=<span class="number">-1</span>), axis=<span class="number">-1</span>)</span><br><span class="line">    acc_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> momentum &gt; <span class="number">0</span>:</span><br><span class="line">        acc_sum = tf.zeros(shape=(bins,), dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ghm_class_loss</span><span class="params">(y_truth, y_pred, valid_mask)</span>:</span></span><br><span class="line">        epsilon = keras.backend.epsilon()</span><br><span class="line">        y_pred = keras.backend.clip(y_pred, epsilon, <span class="number">1.0</span> - epsilon)</span><br><span class="line">        <span class="comment"># 0. 计算本次mini-batch的梯度分布：R_ind(g)</span></span><br><span class="line">        gradient = keras.backend.abs(y_truth - y_pred)</span><br><span class="line">        <span class="comment"># 获取概率最大的类别下标，将该类别的梯度做为该标签的梯度代表</span></span><br><span class="line">        <span class="comment"># 没有这部分就是每个类别的梯度都参与到GHM，实验表明没有这部分会更好些</span></span><br><span class="line">        <span class="comment"># truth_indices_1 = keras.backend.expand_dims(keras.backend.argmax(y_truth, axis=1))</span></span><br><span class="line">        <span class="comment"># truth_indices_0 = keras.backend.expand_dims(keras.backend.arange(start=0,</span></span><br><span class="line">        <span class="comment">#                                                                  stop=tf.shape(y_pred)[0],</span></span><br><span class="line">        <span class="comment">#                                                                  step=1, dtype='int64'))</span></span><br><span class="line">        <span class="comment"># truth_indices = keras.backend.concatenate([truth_indices_0, truth_indices_1])</span></span><br><span class="line">        <span class="comment"># main_gradient = tf.gather_nd(gradient, truth_indices)</span></span><br><span class="line">        <span class="comment"># gradient = tf.tile(tf.expand_dims(main_gradient, axis=-1), [1, y_pred.shape[1]])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 求解各个梯度所在的区间，并落到对应区间内进行密度计数</span></span><br><span class="line">        grads_bin = tf.logical_and(tf.greater_equal(gradient, edges[:<span class="number">-1</span>, :, :]), tf.less(gradient, edges[<span class="number">1</span>:, :, :]))</span><br><span class="line">        valid_bin = tf.boolean_mask(grads_bin, valid_mask, name=<span class="string">'valid_gradient'</span>, axis=<span class="number">1</span>)</span><br><span class="line">        valid_bin = tf.reduce_sum(tf.cast(valid_bin, dtype=tf.float32), axis=(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># 2. 更新指数移动平均后的梯度分布：S_ind(g)</span></span><br><span class="line">        <span class="keyword">nonlocal</span> acc_sum</span><br><span class="line">        acc_sum = tf.add(momentum * acc_sum, (<span class="number">1</span> - momentum) * valid_bin, name=<span class="string">'update_bin_number'</span>)</span><br><span class="line">        <span class="comment"># sample_num = tf.reduce_sum(acc_sum)  # 是否乘以总数，乘上效果反而变差了</span></span><br><span class="line">        <span class="comment"># 3. 计算本次mini-batch不同loss对应的梯度密度：GD(g)</span></span><br><span class="line">        position = tf.slice(tf.where(grads_bin), [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">-1</span>, <span class="number">2</span>])</span><br><span class="line">        value = tf.gather_nd(acc_sum, tf.slice(tf.where(grads_bin), [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">-1</span>, <span class="number">1</span>]))  <span class="comment"># * bins</span></span><br><span class="line">        grad_density = tf.sparse.SparseTensor(indices=position, values=value,</span><br><span class="line">                                              dense_shape=tf.shape(gradient, out_type=tf.int64))</span><br><span class="line">        grad_density = tf.sparse.to_dense(grad_density, validate_indices=<span class="literal">False</span>)</span><br><span class="line">        grad_density = grad_density * tf.expand_dims(valid_mask, <span class="number">-1</span>) + (<span class="number">1</span> - tf.expand_dims(valid_mask, <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 计算本次mini-batch不同样本的损失：loss</span></span><br><span class="line">        cross_entropy = -y_truth * keras.backend.log(y_pred)</span><br><span class="line">        <span class="comment"># loss = cross_entropy / grad_density * sample_num</span></span><br><span class="line">        loss = cross_entropy / grad_density</span><br><span class="line">        loss = keras.backend.sum(loss, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        # 调试用，打印tensor</span></span><br><span class="line"><span class="string">        print_op = tf.print('acc_sum: ', acc_sum, '\n',</span></span><br><span class="line"><span class="string">                            'grad_density: ', grad_density, '\n',</span></span><br><span class="line"><span class="string">                            'cross_entropy: ', cross_entropy, '\n',</span></span><br><span class="line"><span class="string">                            'loss:', loss, '\n',</span></span><br><span class="line"><span class="string">                            '\n',</span></span><br><span class="line"><span class="string">                            '=================================================\n',</span></span><br><span class="line"><span class="string">                            summarize=100)</span></span><br><span class="line"><span class="string">        with tf.control_dependencies([print_op]):</span></span><br><span class="line"><span class="string">            return tf.identity(loss)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line">    <span class="keyword">return</span> ghm_class_loss</span><br></pre></td></tr></table></figure><h2 id="Gradient-Harmonizing-Mechanism-——-GHM-R-Loss"><a href="#Gradient-Harmonizing-Mechanism-——-GHM-R-Loss" class="headerlink" title="Gradient Harmonizing Mechanism —— GHM-R Loss"></a>Gradient Harmonizing Mechanism —— GHM-R Loss</h2><p>一般的回归损失是：</p><script type="math/tex; mode=display">SL_{1}(d) =\left\{\begin{matrix}\frac{d^{2}}{2\delta} & if  |d| <= \delta \\|d| - \frac{\delta}{2} & otherwise\end{matrix}\right.</script><p>这样得到的梯度为：</p><script type="math/tex; mode=display">\frac{\partial SL_{1}}{\partial d} =\left\{\begin{matrix}\frac{d}{\delta} & if \; |d| <= \delta \\sgn(d) & otherwise\end{matrix}\right.\Rightarrow   \vee |d| > \delta, |\frac{\partial SL_{1}}{\partial d}| = 1</script><p>由于大部分为梯度为1，没法计算梯度密度。故改进回归损失为：</p><script type="math/tex; mode=display">ASL_{1}(d) = \sqrt{(d^{2} + \mu_{2})} - \mu\Rightarrow\frac{\partial ASL_{1}(d)}{\partial d} = \frac{d}{\sqrt{(d^{2} + \mu_{2})}}</script><p>然后按照 GHM-C Loss 的步骤计算 GHM-R Loss即可（按经验<script type="math/tex">u=0.02</script>）。</p><p align="center">    <img src="https://zheng-yuwei.github.io/images/GHM%E8%AE%BA%E6%96%87%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/regression_harmonized_gradient.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> GHM </tag>
            
            <tag> 损失函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车牌识别AI技术的思考</title>
      <link href="/2019/05/10/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%ABAI%E6%8A%80%E6%9C%AF%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/05/10/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%ABAI%E6%8A%80%E6%9C%AF%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>车辆牌照的识别是基于图像分割和图像识别理论，对含有车辆号牌的图像进行分析处理，从而确定牌照在图像中的位置，并进一步提取和识别出文本字符。</p><p>识别步骤概括为：<strong>车牌定位、车牌提取、字符识别</strong>。三个步骤相辅相成，各自的有效性都较高，整体的识别率才会提高。</p><a id="more"></a><h2 id="车牌检测"><a href="#车牌检测" class="headerlink" title="车牌检测"></a>车牌检测</h2><p>主要分为2种技术方向来分析：</p><ol><li>回归框检测；</li><li>关键点检测</li></ol><p>传统图像分割 基于边缘、颜色、形状特征，或使用HOG、LBP、Haar特征提取方法，受环境（亮度、对比度等）、场景影响严重，这里按下不表。</p><h3 id="车牌检测：回归框"><a href="#车牌检测：回归框" class="headerlink" title="车牌检测：回归框"></a>车牌检测：回归框</h3><p><strong>单阶段目标检测</strong>：使用one-stage检测算法定位车牌。</p><blockquote><p>优势：</p><ul><li>框架简单；</li><li>检测速度快，适用于多车牌。</li></ul><p>不足：</p><ul><li>受车牌角度影响严重，适用于角度变化不大的场景</li></ul></blockquote><h3 id="车牌检测：关键点"><a href="#车牌检测：关键点" class="headerlink" title="车牌检测：关键点"></a>车牌检测：关键点</h3><p><strong>MTCNN</strong>：图像金字塔 + cascade CNN</p><blockquote><p>优势：</p><ul><li>整体模型小，存储及显存占用小；</li><li>推理速度与车牌数量相关，车牌数量少时推理速度快；</li></ul><p>不足：</p><ul><li>受第一个阶段的影响，车牌的角度也受一定的限制（可设置H:W=1:3或3:5等），或者需要额外设计第一阶段的车牌recall方式；</li><li>整个训练流程分为3个阶段，比较繁琐，特别需要联合调参以达到商业指标；</li><li>需要支持batch推理模式，才能发挥出MTCNN的推理速度优势；</li></ul></blockquote><p><strong>Deepercut/ Pose Residual Network/ OpenPose</strong>：全卷积得heatmap + 关键点归属</p><blockquote><p>优势：</p><ul><li>速度较快；</li><li>不限车牌数；</li><li>精度可以；</li></ul></blockquote><p><strong>(Stack) Hourglass</strong>：Hourglass系列</p><blockquote><p>优势：</p><ul><li>可以与单阶段目标检测结合，加上关键点检测；也可直接作为端到端关键点检测（associative embedding）；</li><li>检测精度高；</li></ul><p>不足：</p><ul><li>整体模型较大，速度慢；</li><li>结构设计时，限定了检测的车牌数上限；</li></ul></blockquote><p><strong>两阶段top-down关键点检测</strong>：检测算法+CNN/CPN/stack hourglass等</p><blockquote><p>优势：</p><ul><li>在多车牌场景下，可以获得高准确率及召回率；</li><li>设计灵活；</li></ul><p>不足：</p><ul><li>没形成端到端模型，训练/优化麻烦；</li></ul></blockquote><h3 id="车牌检测总结"><a href="#车牌检测总结" class="headerlink" title="车牌检测总结"></a>车牌检测总结</h3><ul><li>具有极致的速度要求和角度较小的单一场景，可以考虑使用单阶段目标检测算法。</li><li>若车牌角度变化大：则使用关键点检测算法；<ul><li>若有速度要求，单车牌场景可考虑两阶段关键点检测，多车牌场景可考虑Deepercut、Pose Residual Network/openpose；</li><li>若对算力约束不大，角度要求高，多车牌，则可考虑使用复杂二阶段关键点检测、stack hourglass变种等算法。</li></ul></li></ul><h2 id="车牌识别"><a href="#车牌识别" class="headerlink" title="车牌识别"></a>车牌识别</h2><p><strong>GRU/bi-LSTM + CNN + CTC Loss</strong>：</p><blockquote><p>优势：</p><ul><li>先验的空间分割（但对双层车牌，这个先验则变成劣势）</li><li>空间上下文信息（这个信息较少，应该就只有两个：省份简称和首字母、剩余5位车牌中最多2位是字母）</li></ul><p>不足：</p><ul><li>中国车牌不同位置的字符具有不同取值集合，而RNN结构将这些值集放到一起进行预测，失去了不同位的值集先验，并且提升了类别失衡的风险；</li><li>RNN结构使得推理最后分类部分有时序耦合作用，降低推理速度；</li></ul></blockquote><p align="center">    <img src="https://zheng-yuwei.github.io/images/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%ABAI%E6%8A%80%E6%9C%AF%E7%9A%84%E6%80%9D%E8%80%83/CNN_LSTM_CTC.png"></p><p><strong>多标签多分类</strong>：</p><blockquote><p>优势：</p><ul><li>速度快；</li><li>结构灵活</li></ul><p>不足：</p><ul><li>没有运用字符间的空间信息</li></ul></blockquote><p align="center">    <img src="https://zheng-yuwei.github.io/images/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%ABAI%E6%8A%80%E6%9C%AF%E7%9A%84%E6%80%9D%E8%80%83/multi_label_classification.png"></p><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><p><strong>检测与识别端到端优化（如CCPD论文）</strong>：</p><blockquote><p>优势：</p><ul><li>端到端训练与推理；</li></ul><p>不足：</p><ul><li>没法引入其他车牌进行车牌侧的优化；</li><li>不算是主流方法，精度待验证；</li></ul></blockquote><p><strong>检测+字符分割+识别</strong>：</p><blockquote><p>优势：</p><ul><li>复用不同位置的字符样本</li><li>单字符识别更加容易</li></ul><p>不足：</p><ul><li>需要进行字符分割；</li><li>多字符分别识别（也可作为batch），影响速度;</li><li>类别失衡和位置集合信息丢失；</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 车牌识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caffe使用的一些Q&amp;A</title>
      <link href="/2019/04/25/Caffe%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9BQ&amp;A/"/>
      <url>/2019/04/25/Caffe%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9BQ&amp;A/</url>
      
        <content type="html"><![CDATA[<p>训练好的模型测试效果差？不同层的同名blob变量意味着什么？</p><a id="more"></a><p><strong>Question</strong>: 训练好的模型，部署测试的时候效果极差（相对训练时loss,cls等输出而言）  </p><p><strong>Answer</strong>: 可能的情况有：</p><ul><li><p>deploy.prototxt中，层的name和train.prototxt中对应层不一致。debug过程可用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line">net = caffe.Net(<span class="string">'deploy.prototxt'</span>, <span class="string">'resnet18.caffemodel'</span>, caffe.TEST)</span><br><span class="line">transformer = caffe.io.Transformer(&#123;<span class="string">'data'</span>: net.blobs[<span class="string">'data'</span>].data.shape&#125;)</span><br><span class="line"><span class="comment"># 将cv2或者caffe读入数据shape(image_height, image_width, channel_num)变为(channel_num, image_height, image_width)</span></span><br><span class="line">transformer.set_transpose(<span class="string">'data'</span>, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">net.blobs[<span class="string">"data"</span>].reshape(<span class="number">1</span>, channel_num, image_height, image_width)</span><br><span class="line">image = cv2.imread(<span class="string">'image.jpg'</span>)/<span class="number">255</span></span><br><span class="line">transformed_image = self.transformer.preprocess(<span class="string">'data'</span>, image)</span><br><span class="line">net.blobs[<span class="string">'data'</span>].data[...] = transformed_image</span><br><span class="line">output = net.forward()  <span class="comment"># 输出层数据(batch_size, channel_num, image_height, image_width)</span></span><br><span class="line">print([(k,v[<span class="number">0</span>].data) <span class="keyword">for</span> k,v <span class="keyword">in</span> net.params.items()])</span><br><span class="line">w1 = net.params[<span class="string">'Convolution_top'</span>][<span class="number">0</span>].data  <span class="comment"># 查看网络权重参数，若name不一致，该层可能初始化为0，或随机初始化等不可预期操作</span></span><br><span class="line">b1 = net.params[<span class="string">'Convolution_top'</span>][<span class="number">1</span>].data</span><br><span class="line">feature = = net.blobs[<span class="string">'Convolution_name'</span>].data  <span class="comment"># 查看网络对应name的输出特征</span></span><br></pre></td></tr></table></figure></li><li><p>输入的图片数据，和训练时输入的图片数据预处理不一致。如训练用opencv的<code>cv2.imread(&#39;image.jpg&#39;)</code>，而测试用<code>caffe.io.load_image(&#39;image.jpg&#39;)</code>。因为，<code>cv2.imread()</code>读入的图片是[0, 255]的BRG格式，而<code>caffe.io.load_image()</code>读入的数据是[0, 1]范围的RGB格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line">net = caffe.Net(<span class="string">'deploy.prototxt'</span>, <span class="string">'resnet18.caffemodel'</span>, caffe.TEST)</span><br><span class="line">transformer = caffe.io.Transformer(&#123;<span class="string">'data'</span>: net.blobs[<span class="string">'data'</span>].data.shape&#125;)</span><br><span class="line"><span class="comment"># 将cv2或者caffe读入数据shape(image_height, image_width, channel_num)变为(channel_num, image_height, image_width)</span></span><br><span class="line">transformer.set_transpose(<span class="string">'data'</span>, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))  </span><br><span class="line">transformer.set_channel_swap(<span class="string">'data'</span>, (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>))  <span class="comment"># 将channels从RGB变为BGR，这个只有在用caffe.io.load_image()才需要</span></span><br><span class="line">net.blobs[<span class="string">"data"</span>].reshape(<span class="number">1</span>, channel_num, image_height, image_width)</span><br><span class="line"><span class="comment"># 如果用cv2，读入则依据train.prototxt中数据预处理是否用了归一化，考虑cv2.imread('image.jpg')/255进行归一操作</span></span><br><span class="line">image = caffe.io.load_image(<span class="string">'image.jpg'</span>)  </span><br><span class="line">transformed_image = self.transformer.preprocess(<span class="string">'data'</span>, image)</span><br><span class="line">net.blobs[<span class="string">'data'</span>].data[...] = transformed_image</span><br></pre></td></tr></table></figure></li></ul><p><strong>Question</strong>: 在训练模型时，模型加载一半，报出以下错误：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">I0614 06:47:37.005009  6183 layer_factory.hpp:77] Creating layer res4b_res4b_0_split</span><br><span class="line">I0614 06:47:37.005156  6183 net.cpp:84] Creating Layer res4b_res4b_0_split</span><br><span class="line">I0614 06:47:37.005290  6183 net.cpp:406] res4b_res4b_0_split &lt;- res4b</span><br><span class="line">I0614 06:47:37.005432  6183 net.cpp:380] res4b_res4b_0_split -&gt; res4b_res4b_0_split_0</span><br><span class="line">I0614 06:47:37.005589  6183 net.cpp:380] res4b_res4b_0_split -&gt; res4b_res4b_0_split_1</span><br><span class="line">I0614 06:47:37.005784  6183 net.cpp:122] Setting up res4b_res4b_0_split</span><br><span class="line">I0614 06:47:37.005924  6183 net.cpp:129] Top shape: 128 256 6 18 (3538944)</span><br><span class="line">I0614 06:47:37.006058  6183 net.cpp:129] Top shape: 128 256 6 18 (3538944)</span><br><span class="line">I0614 06:47:37.006186  6183 net.cpp:137] Memory required for data: 3266455552</span><br><span class="line"># 以下为两个分支，resnet_v2 residual block</span><br><span class="line"># 第一个分支：conv 1*1，channel翻倍（我这里翻一半256-&gt;384），feature map stride为2（6 * 18 -&gt; 3 * 9）</span><br><span class="line">I0614 06:47:37.006321  6183 layer_factory.hpp:77] Creating layer res5a_branch1</span><br><span class="line">I0614 06:47:37.006469  6183 net.cpp:84] Creating Layer res5a_branch1</span><br><span class="line">I0614 06:47:37.006597  6183 net.cpp:406] res5a_branch1 &lt;- res4b_res4b_0_split_0</span><br><span class="line">I0614 06:47:37.006743  6183 net.cpp:380] res5a_branch1 -&gt; res5a_branch1</span><br><span class="line">I0614 06:47:37.010433  6183 net.cpp:122] Setting up res5a_branch1</span><br><span class="line">I0614 06:47:37.010591  6183 net.cpp:129] Top shape: 128 384 3 9 (1327104)</span><br><span class="line">I0614 06:47:37.010730  6183 net.cpp:137] Memory required for data: 3271763968</span><br><span class="line"># 第二个分支：两个base building block，第一个要负责channel翻倍和feature map stride为2</span><br><span class="line"># BN</span><br><span class="line">I0614 06:47:37.010865  6183 layer_factory.hpp:77] Creating layer bn5a_branch2a</span><br><span class="line">I0614 06:47:37.011039  6183 net.cpp:84] Creating Layer bn5a_branch2a</span><br><span class="line">I0614 06:47:37.011173  6183 net.cpp:406] bn5a_branch2a &lt;- res4b_res4b_0_split_1</span><br><span class="line">I0614 06:47:37.011315  6183 net.cpp:380] bn5a_branch2a -&gt; res5a_branch2a</span><br><span class="line">I0614 06:47:37.011767  6183 net.cpp:122] Setting up bn5a_branch2a</span><br><span class="line">I0614 06:47:37.011909  6183 net.cpp:129] Top shape: 128 256 6 18 (3538944)</span><br><span class="line">I0614 06:47:37.012042  6183 net.cpp:137] Memory required for data: 3285919744</span><br><span class="line"># scale</span><br><span class="line">I0614 06:47:37.012198  6183 layer_factory.hpp:77] Creating layer scale5a_branch2a</span><br><span class="line">I0614 06:47:37.012343  6183 net.cpp:84] Creating Layer scale5a_branch2a</span><br><span class="line">I0614 06:47:37.012476  6183 net.cpp:406] scale5a_branch2a &lt;- res5a_branch2a</span><br><span class="line">I0614 06:47:37.012619  6183 net.cpp:367] scale5a_branch2a -&gt; res5a_branch2a (in-place)</span><br><span class="line">I0614 06:47:37.012815  6183 layer_factory.hpp:77] Creating layer scale5a_branch2a</span><br><span class="line">I0614 06:47:37.013126  6183 net.cpp:122] Setting up scale5a_branch2a</span><br><span class="line">I0614 06:47:37.013267  6183 net.cpp:129] Top shape: 128 256 6 18 (3538944)</span><br><span class="line">I0614 06:47:37.013396  6183 net.cpp:137] Memory required for data: 3300075520</span><br><span class="line"># ReLu</span><br><span class="line">I0614 06:47:37.013535  6183 layer_factory.hpp:77] Creating layer res5a_branch2a_relu</span><br><span class="line">I0614 06:47:37.013675  6183 net.cpp:84] Creating Layer res5a_branch2a_relu</span><br><span class="line">I0614 06:47:37.013814  6183 net.cpp:406] res5a_branch2a_relu &lt;- res5a_branch2a</span><br><span class="line">I0614 06:47:37.013959  6183 net.cpp:367] res5a_branch2a_relu -&gt; res5a_branch2a (in-place)</span><br><span class="line">I0614 06:47:37.014320  6183 net.cpp:122] Setting up res5a_branch2a_relu</span><br><span class="line">I0614 06:47:37.014461  6183 net.cpp:129] Top shape: 128 256 6 18 (3538944)</span><br><span class="line">I0614 06:47:37.014588  6183 net.cpp:137] Memory required for data: 3314231296</span><br><span class="line"># 问题出在这 conv 3*3 pad 1 stride 2 channel 256-&gt;384，这里输出blob（top layer）和输入blob（bottom layer）的大小已经完全不一致</span><br><span class="line"># 但是我在prototxt中，仍给这两个变量命为同一个名，导致两个在进行inplace运算时，caffe尝试reshape而报错</span><br><span class="line">I0614 06:47:37.014735  6183 layer_factory.hpp:77] Creating layer res5a_branch2a</span><br><span class="line">I0614 06:47:37.014889  6183 net.cpp:84] Creating Layer res5a_branch2a</span><br><span class="line">I0614 06:47:37.015050  6183 net.cpp:406] res5a_branch2a &lt;- res5a_branch2a</span><br><span class="line">I0614 06:47:37.015213  6183 net.cpp:367] res5a_branch2a -&gt; res5a_branch2a (in-place)</span><br><span class="line">F0614 06:47:37.033099  6183 cudnn_conv_layer.cpp:138] Check failed: status == CUDNN_STATUS_SUCCESS (3 vs. 0)  CUDNN_STATUS_BAD_PARAM</span><br><span class="line">*** Check failure stack trace: ***</span><br><span class="line">    @     0x7fb4b4a675cd  google::LogMessage::Fail()</span><br><span class="line">    @     0x7fb4b4a69433  google::LogMessage::SendToLog()</span><br><span class="line">    @     0x7fb4b4a6715b  google::LogMessage::Flush()</span><br><span class="line">    @     0x7fb4b4a69e1e  google::LogMessageFatal::~LogMessageFatal()</span><br><span class="line">    @     0x7fb4b5074598  caffe::CuDNNConvolutionLayer&lt;&gt;::Reshape()</span><br><span class="line">    @     0x7fb4b519dddb  caffe::Net&lt;&gt;::Init()</span><br><span class="line">    @     0x7fb4b51a061e  caffe::Net&lt;&gt;::Net()</span><br><span class="line">    @     0x7fb4b51a9775  caffe::Solver&lt;&gt;::InitTrainNet()</span><br><span class="line">    @     0x7fb4b51aaba5  caffe::Solver&lt;&gt;::Init()</span><br><span class="line">    @     0x7fb4b51aaebf  caffe::Solver&lt;&gt;::Solver()</span><br><span class="line">    @     0x7fb4b51bc3d1  caffe::Creator_AdamSolver&lt;&gt;()</span><br><span class="line">    @           0x40bfb3  train()</span><br><span class="line">    @           0x408660  main</span><br><span class="line">    @     0x7fb4b3b9c830  __libc_start_main</span><br><span class="line">    @           0x408fb9  _start</span><br><span class="line">    @              (nil)  (unknown)</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure></p><p><strong>Answer</strong>：解释如上注释，不同层的同名blob变量可以看成是不同层，在复用c++里已经定义好的数组（inplace），所以数组的shape必须是一致的。</p><p>修改如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;res5a_branch2a&quot;</span><br><span class="line">    top: &quot;res5a_branch2a&quot;</span><br><span class="line">    name: &quot;scale5a_branch2a&quot;</span><br><span class="line">    type: &quot;Scale&quot;</span><br><span class="line">    scale_param &#123;</span><br><span class="line">        bias_term: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;res5a_branch2a&quot;</span><br><span class="line">    top: &quot;res5a_branch2a&quot;</span><br><span class="line">    name: &quot;res5a_branch2a_relu&quot;</span><br><span class="line">    type: &quot;ReLU&quot;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;res5a_branch2a&quot;</span><br><span class="line">    top: &quot;res5a_branch2a&quot; -&gt; top: &quot;res5a_branch2b&quot;</span><br><span class="line">    name: &quot;res5a_branch2a&quot;</span><br><span class="line">    type: &quot;Convolution&quot;</span><br><span class="line">    convolution_param &#123;</span><br><span class="line">        num_output: 384</span><br><span class="line">        kernel_size: 3</span><br><span class="line">        pad: 1</span><br><span class="line">        stride: 2</span><br><span class="line">        weight_filler &#123;</span><br><span class="line">            type: &quot;msra&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        bias_term: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;res5a_branch2a&quot; -&gt; bottom: &quot;res5a_branch2b&quot;</span><br><span class="line">    top: &quot;res5a_branch2b&quot;</span><br><span class="line">    name: &quot;bn5a_branch2b&quot;</span><br><span class="line">    type: &quot;BatchNorm&quot;</span><br><span class="line">    batch_norm_param&#123;</span><br><span class="line">        use_global_stats: false</span><br><span class="line">        moving_average_fraction: 0.95</span><br><span class="line">    &#125;</span><br><span class="line">    include &#123;</span><br><span class="line">        phase: TRAIN</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">layer &#123;</span><br><span class="line">    bottom: &quot;res5a_branch2a&quot; -&gt; bottom: &quot;res5a_branch2b&quot;</span><br><span class="line">    top: &quot;res5a_branch2b&quot;</span><br><span class="line">    name: &quot;bn5a_branch2b&quot;</span><br><span class="line">    type: &quot;BatchNorm&quot;</span><br><span class="line">    batch_norm_param&#123;</span><br><span class="line">        use_global_stats: true</span><br><span class="line">    &#125;</span><br><span class="line">    include &#123;</span><br><span class="line">        phase: TEST</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Caffe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Caffe的一些笔记</title>
      <link href="/2019/04/20/%E5%AE%89%E8%A3%85Caffe%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/04/20/%E5%AE%89%E8%A3%85Caffe%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>主要包含：</p><ol><li>opencv编译安装；</li><li>boost-python3编译安装；</li><li>Caffe make及cmake两种安装方式，bug解决等。</li></ol><a id="more"></a><h2 id="1-安装anaconda"><a href="#1-安装anaconda" class="headerlink" title="1. 安装anaconda"></a>1. 安装anaconda</h2><p>直接到官网下载linux系统最新的anaconda安装shell脚本，在确保联网的情况下，bash AnacondaXXX.sh就行。</p><h2 id="2-创建anaconda的Python2-7及Python3-5环境"><a href="#2-创建anaconda的Python2-7及Python3-5环境" class="headerlink" title="2. 创建anaconda的Python2.7及Python3.5环境"></a>2. 创建anaconda的Python2.7及Python3.5环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n caffe_py35 python=3.5</span><br><span class="line">conda create -n caffe_py27 python=2.7</span><br></pre></td></tr></table></figure><h2 id="3-安装NVIDIA-GPU驱动、安装CUDA、配置cuDNN"><a href="#3-安装NVIDIA-GPU驱动、安装CUDA、配置cuDNN" class="headerlink" title="3. 安装NVIDIA GPU驱动、安装CUDA、配置cuDNN"></a>3. 安装NVIDIA GPU驱动、安装CUDA、配置cuDNN</h2><h2 id="4-为不同版本的Python，安装支持CUDA的opencv"><a href="#4-为不同版本的Python，安装支持CUDA的opencv" class="headerlink" title="4. 为不同版本的Python，安装支持CUDA的opencv"></a>4. 为不同版本的Python，安装支持CUDA的opencv</h2><p>先到github上，下载opencv项目和opencv-contrib项目（opencv的扩展模块），都解压到目录<code>/home/zhengyuwei/software/opencv</code>下。</p><p>到<code>opencv</code>解压目录下，进入<code>opencv</code>，执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">sudo cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">      <span class="comment">#安装路径 \</span></span><br><span class="line">      -D CMAKE_INSTALL_PREFIX=<span class="string">"/home/zhengyuwei/software/opencv/opencv-install/"</span> \</span><br><span class="line">      -D INSTALL_C_EXAMPLES=ON \</span><br><span class="line">      <span class="comment">#opencv的扩展模块 \</span></span><br><span class="line">      -D OPENCV_EXTRA_MODULES_PATH=<span class="string">"/home/zhengyuwei/software/opencv/opencv_contrib-master/modules"</span> \</span><br><span class="line">      -D BUILD_EXAMPLES=ON \</span><br><span class="line">      -D BUILD_opencv_python2=ON \</span><br><span class="line">      <span class="comment"># 支持CUDA \</span></span><br><span class="line">      -D WITH_FFMPEG=1 \</span><br><span class="line">      -D WITH_TIFF=ON \</span><br><span class="line">      -D WITH_CUDA=ON \</span><br><span class="line">      -D CUDA_GENERATION=Pascal \</span><br><span class="line">      -D ENABLE_FAST_MATH=1 \</span><br><span class="line">      -D CUDA_FAST_MATH=1 \</span><br><span class="line">      -D WITH_CUBLAS=ON \</span><br><span class="line">      -D WITH_LAPACK=OFF \</span><br><span class="line">      -D WITH_GTK=OFF -D WITH_GTK_2_X=OFF -D WITH_MATLAB=OFF -D WITH_QT=ON \</span><br><span class="line">      -D CUDA_NVCC_FLAGS=<span class="string">"-D_FORCE_INLINES"</span> -D ENABLE_CXX11=1 \</span><br><span class="line">      <span class="comment"># 指定protobuf路径，如果出现版本问题，要确定本版本opencv匹配哪个版本的protobuf（我是opencv4.0和protobuf3.7.0）</span></span><br><span class="line">      <span class="comment"># 如果对应版本后，还是出现old/new version导致的error，只好将对应的module排除掉，我排除了dnn：-D BUILD_opencv_dnn=OFF</span></span><br><span class="line">      -D WITH_PROTOBUF=ON -D BUILD_PROTOBUF=OFF -D -BUILD_LIBPROTOBUF_FROM_SOURCES=OFF -D PROTOBUF_UPDATE_FILES=OFF \</span><br><span class="line">      -D ENABLE_PRECOMPILED_HEADERS=ON \</span><br><span class="line">      -D PROTOBUF_INCLUDE_DIR=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/include"</span> \</span><br><span class="line">      -D PROTOBUF_INCLUDE_DIRS=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/include"</span> \</span><br><span class="line">      -D PROTOBUF_LIBRARIES=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotobuf.so;-lpthread"</span> \</span><br><span class="line">      -D PROTOBUF_LIBRARY=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotobuf.so"</span> \</span><br><span class="line">      -D PROTOBUF_LIBRARY_DEBUG=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotobuf.so"</span> \</span><br><span class="line">      -D PROTOBUF_LITE_LIBRARIES=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotobuf-lite.so"</span> \</span><br><span class="line">      -D PROTOBUF_LITE_LIBRARY=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotobuf-lite.so"</span> \</span><br><span class="line">      -D PROTOBUF_LITE_LIBRARY_DEBUG=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotobuf-lite.so"</span> \</span><br><span class="line">      -D PROTOBUF_PROTOC_EXECUTABLE=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/bin/protoc"</span> \</span><br><span class="line">      -D PROTOBUF_PROTOC_LIBRARIES=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotoc.so"</span> \</span><br><span class="line">      -D PROTOBUF_PROTOC_LIBRARY=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotoc.so"</span> \</span><br><span class="line">      -D PROTOBUF_PROTOC_LIBRARY_DEBUG=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libprotoc.so"</span> \</span><br><span class="line">      <span class="comment"># 支持Python2.7 \</span></span><br><span class="line">      -D PYTHON2_EXECUTABLE=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py27/bin/python"</span> \</span><br><span class="line">      -D PYTHON2_INCLUDE_DIR=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py27/include/python2.7"</span> \</span><br><span class="line">      -D PYTHON2_LIBRARY=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py27/lib/libpython2.7.so"</span> \</span><br><span class="line">      -D PYTHON2_NUMPY_INCLUDE_DIRS=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py27/lib/python2.7/site-packages/numpy/core/include"</span> \</span><br><span class="line">      <span class="comment"># 支持Python3.5 \</span></span><br><span class="line">      -D PYTHON3_EXECUTABLE=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/bin/python"</span> \</span><br><span class="line">      -D PYTHON3_INCLUDE_DIR=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/include/python3.5m"</span> \</span><br><span class="line">      -D PYTHON3_LIBRARY=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/libpython3.5m.so"</span> \</span><br><span class="line">      -D PYTHON3_NUMPY_INCLUDE_DIRS=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib/python3.5/site-packages/numpy/core/include"</span> \</span><br><span class="line">      -D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">      -D OPENCV_SKIP_PYTHON_LOADER=ON ..</span><br><span class="line"><span class="comment"># 这里会打印配置信息，确保configure done</span></span><br><span class="line">sudo make -j</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>Q1: unsupported/Eigen/…不存在？A1: 到eigen github下载压缩包，解压后里面有<code>unsupported</code>目录，移到能找到的<code>include</code>文件夹下。</p><p>Q2: <code>opencv-3.4/modules/dnn/misc/tensorflow/graph.pb.h:17:2: error: #error This file was generated by an older version of protoc which is</code> protobuf版本问题？A2: 增加cmake选项<code>-D BUILD_PROTOBUF=OFF -D BUILD_opencv_dnn=OFF</code>。</p><p>安装完成后，到安装路径（<code>CMAKE_INSTALL_PREFIX=/home/zhengyuwei/software/opencv/opencv-install</code>）的<code>lib</code>目录下，可以发现<code>python2.7</code>和<code>python3.5</code>两个文件夹，里面都有<code>site-packages/cv2.XXX</code>文件，到对应python环境<code>lib/pythonX.X/site-packages</code>下，建立so文件的软链接：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/zhengyuwei/software/anaconda3/envs/caffe_py27/lib</span><br><span class="line">ln -s /home/zhengyuwei/software/opencv/opencv-install/lib/python2.7/site-packages/cv2.so \</span><br><span class="line">/home/zhengyuwei/software/anaconda3/envs/caffe_py27/lib/python2.7/site-packages/cv2.so</span><br></pre></td></tr></table></figure></p><p>最后，检查是否安装成功，也可建立对应的opencv.pc文件，并添加到PATH路径。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># opencv.pc</span></span><br><span class="line"><span class="comment"># Package Information for pkg-config</span></span><br><span class="line"></span><br><span class="line">prefix=/home/zhengyuwei/software/opencv/opencv-install</span><br><span class="line">exec_prefix=<span class="variable">$&#123;prefix&#125;</span></span><br><span class="line">libdir=<span class="variable">$&#123;exec_prefix&#125;</span>/lib</span><br><span class="line">includedir_old=<span class="variable">$&#123;prefix&#125;</span>/include/opencv4</span><br><span class="line">includedir_new=<span class="variable">$&#123;prefix&#125;</span>/include</span><br><span class="line"></span><br><span class="line">Name: OpenCV</span><br><span class="line">Description: Openurce Computer Vision Library</span><br><span class="line">Version: 4.1.0-pre</span><br><span class="line">Libs: -L<span class="variable">$&#123;libdir&#125;</span> -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_calib3d -lopencv_ccalib -lopencv_core -lopencv_cudaarithm -lopencv_cudabgsegm -lopencv_cudacodec -lopencv_cudafeatures2d -lopencv_cudafilters -lopencv_cudaimgproc -lopencv_cudalegacy -lopencv_cudaobjdetect -lopencv_cudaoptflow -lopencv_cudastereo -lopencv_cudawarping -lopencv_cudev -lopencv_datasets -lopencv_dnn_objdetect -lopencv_dnn -lopencv_dpm -lopencv_face -lopencv_features2d -lopencv_flann -lopencv_freetype -lopencv_fuzzy -lopencv_gapi -lopencv_hdf -lopencv_hfs -lopencv_highgui -lopencv_imgcodecs -lopencv_img_hash -lopencv_imgproc -lopencv_line_descriptor -lopencv_ml -lopencv_objdetect -lopencv_optflow -lopencv_phase_unwrapping -lopencv_photo -lopencv_plot -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_shape -lopencv_stereo -lopencv_stitching -lopencv_structured_light -lopencv_superres -lopencv_surface_matching -lopencv_text -lopencv_tracking -lopencv_videoio -lopencv_video -lopencv_videostab -lopencv_xfeatures2d -lopencv_ximgproc -lopencv_xobjdetect -lopencv_xphoto</span><br><span class="line">Libs.private: -L/usr/<span class="built_in">local</span>/public/anaconda3/lib -lpng -lz -L/usr/lib/x86_64-linux-gnu -ljasper -ljpeg -lImath -lIlmImf -lIex -lHalf -lIlmThread -lgtk-3 -lgdk-3 -lpangocairo-1.0 -lpango-1.0 -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0 -lgthread-2.0 -lgstbase-1.0 -lgstreamer-1.0 -lgstvideo-1.0 -lgstapp-1.0 -lgstriff-1.0 -lgstpbutils-1.0 -ldc1394 -lavcodec -lavformat -lavutil -lswscale -ldl -lm -lpthread -lrt -L/usr/lib -lopenblas -L/usr/<span class="built_in">local</span>/cuda-8.0 -l64</span><br><span class="line">Cflags: -I<span class="variable">$&#123;includedir_old&#125;</span> -I<span class="variable">$&#123;includedir_new&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="5-安装caffe："><a href="#5-安装caffe：" class="headerlink" title="5. 安装caffe："></a>5. 安装caffe：</h2><p>把caffe源码库拷贝下来后，有两种编译caffe的方式：</p><ul><li>在caffe目录下直接 make、 make pycaffe 来构建工程caffe的C++库和Python库；</li><li>先mkdir build后，在build文件夹下cmake，然后再make、make pycaffe。</li></ul><h3 id="对于makefile方法"><a href="#对于makefile方法" class="headerlink" title="对于makefile方法"></a>对于makefile方法</h3><p>主要修改 <strong>Makefile.config</strong> 文件，主要修改点有：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">USE_CUDNN := 1</span><br><span class="line">OPENCV_VERSION := 3</span><br><span class="line"><span class="comment"># 选择特定的CUDA安装路径</span></span><br><span class="line">CUDA_DIR := /usr/<span class="built_in">local</span>/cuda-8.0</span><br><span class="line"><span class="comment"># 选择特定的Python/Numpy安装include/lib目录</span></span><br><span class="line">PYTHON_INCLUDE := /usr/<span class="built_in">local</span>/public/anaconda3/envs/caffe_py35/include \</span><br><span class="line">/usr/<span class="built_in">local</span>/public/anaconda3/envs/caffe_py35/lib/python3.5/site-packages/numpy/core/include</span><br><span class="line">PYTHON_LIBRARIES := boost_python3 python3.5m</span><br><span class="line">PYTHON_LIB := /usr/<span class="built_in">local</span>/public/anaconda2/envs/caffe_py3.5/lib /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/<span class="built_in">local</span>/include /usr/include/hdf5/serial</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) $(CUDA_DIR)/lib64 /usr/<span class="built_in">local</span>/lib \</span><br><span class="line">    /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class="line"><span class="comment"># 多GPU</span></span><br><span class="line">USE_NCCL := 1</span><br></pre></td></tr></table></figure></p><p>同时，也可修改下Makefile文件里的：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVCCFLAGS += -D_FORCE_INLINES -ccbin=<span class="variable">$(CXX)</span> -Xcompiler -fPIC <span class="variable">$(COMMON_FLAGS)</span></span><br></pre></td></tr></table></figure></p><h3 id="对于cmake方法"><a href="#对于cmake方法" class="headerlink" title="对于cmake方法"></a>对于cmake方法</h3><p>修改cmake/Dependencies.cmake:在 <code>if(BUILD_python)</code> 分支中， <code>if(NOT &quot;${python_version}&quot; VERSION_LESS &quot;3.0.0&quot;)</code> 分支中，添加：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> Boost_PYTHON_FOUND)</span><br><span class="line">    <span class="keyword">find_package</span>(Boost <span class="number">1.46</span> COMPONENTS <span class="string">"python3"</span>)</span><br><span class="line">    <span class="keyword">set</span>(Boost_PYTHON_FOUND <span class="variable">$&#123;Boost_PYTHON3_FOUND&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure></p><p>然后到build文件加下，执行cmake：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line"><span class="comment"># -D BUILD_TIFF=ON -D CUDA_DIR="/usr/local/cuda-8.0" \</span></span><br><span class="line">-D CUDA_TOOLKIT_ROOT_DIR=<span class="string">"/usr/local/cuda-8.0"</span> \</span><br><span class="line">-D CUDNN_INCLUDE=<span class="string">"/usr/local/cuda-8.0/include"</span> \</span><br><span class="line">-D CUDNN_LIBRARY=<span class="string">"/usr/local/cuda-8.0/lib64/libcudnn.so"</span> \</span><br><span class="line">-D PYTHON_LIBRARIES=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/lib;/usr/local/lib"</span> \</span><br><span class="line">-D PYTHON_INCLUDE_DIR=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/include/python3.5m/"</span> \</span><br><span class="line">-D PYTHON_EXECUTABLE=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/bin/python"</span> \</span><br><span class="line">-D python_version=3.5 -D USE_NCCL=1 \</span><br><span class="line">-D NCCL_INCLUDE_DIR=<span class="string">"/home/zhengyuwei/software/nccl-master/build/include"</span> \</span><br><span class="line">-D NCCL_LIBRARIES=<span class="string">"/home/zhengyuwei/software/nccl-master/build/lib/libnccl.so"</span> ..</span><br></pre></td></tr></table></figure></p><p>Q1: 若opencv报错，没有找到opencv相关的定义。A1: 确认安装了opencv，在cmake/dependencies.cmake文件下，<code>if(USE_OPENCV)</code>行后添加一行指定opencv的安装位置：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(USE_OPENCV)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_PREFIX_PATH /home/zhengyuwei/software/opencv/opencv-<span class="keyword">install</span> <span class="variable">$&#123;CMAKE_PREFIX_PATH&#125;</span>)</span><br></pre></td></tr></table></figure></p><p>Q2: 如果报<code>compute_image_mean.cpp:(.text.startup+0x16d): undefined reference to google::FlagRegisterer::FlagRe</code>相关的错误。A2: gflags的原因，头文件和so版本不一致，导致定义不存在。查看<code>cmake xxx ..</code>时输出的以下信息，保证路径中头文件和so一直，当然，还有glog等。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- Found GFlags: /usr/<span class="built_in">local</span>/include</span><br><span class="line">-- Found gflags  (include: /usr/<span class="built_in">local</span>/include, library: /usr/<span class="built_in">local</span>/lib/libgflags.so)</span><br></pre></td></tr></table></figure></p><p>Q3: 如果cmake失败，若是<strong>protoc报错</strong>，且确认安装protobuf且版本正确，尝试设置以下环境后，重新安装caffe：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"/usr/local/lib:<span class="variable">$LD_LIBRARY_PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="string">"/usr/local/lib:<span class="variable">$LIBRARY_PATH</span>"</span></span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure></p><p>其实这是在尝试使caffe编译时，能够去获取到指定的版本。另外两个可尝试的方法是：</p><ol><li>直接在/etc/sudoers里添加protobuf的bin路径。</li><li>修改cmake/ProtoBuf.cmake，最前面加：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_PREFIX_PATH /home/zhengyuwei/software/protobuf/protobuf-<span class="keyword">install</span>-<span class="number">2.6</span>.<span class="number">1</span> <span class="variable">$&#123;CMAKE_PREFIX_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">find_package</span>( Protobuf <span class="number">2.6</span>.<span class="number">1</span> )</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-安装boost-python3："><a href="#6-安装boost-python3：" class="headerlink" title="6. 安装boost-python3："></a>6. 安装boost-python3：</h2><p>若是<strong>boost-python3报错</strong>：libboost_python3.so.1.56.0: undefined symbol: PyClass_Type；则表示有人用python2编译boost产生boost-python3，而boost-python3是不需要PyClass_Type的，此时需要安装新的boost：</p><ul><li>官网下载boost代码压缩包，解压；</li><li><p>修改<code>/tools/build/src/tools/</code>路径下的<code>python.jam</code>文件中的547行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">includes ?= $(prefix)/include/python$(version) ; -&gt; includes ?= $(prefix)/include/python$(version)m ;</span><br></pre></td></tr></table></figure></li><li><p>指定python路径及版本，安装boost：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装boost-python3</span></span><br><span class="line">./bootstrap.sh --with-python=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35/bin/python3"</span> \</span><br><span class="line">--with-python-version=3.5 --with-python-root=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py35"</span> \</span><br><span class="line"> --prefix=<span class="string">"/home/zhengyuwei/software/boost_1_69_0/build"</span></span><br><span class="line">./b2 install -a --with=all </span><br><span class="line">./b2 --with-python --buildid=3</span><br><span class="line"><span class="comment"># 清理安装信息，以重新安装boost-python2</span></span><br><span class="line">./b2 --with-python --clean</span><br><span class="line">./bootstrap.sh --with-python=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py27/bin/python"</span> \</span><br><span class="line">--with-python-version=2.7 --with-python-root=<span class="string">"/home/zhengyuwei/software/anaconda3/envs/caffe_py27"</span> \</span><br><span class="line">--prefix=<span class="string">"/home/zhengyuwei/software/boost_1_69_0/build"</span></span><br><span class="line"><span class="comment"># 记住把python.jam 547行改回来，不然报错</span></span><br><span class="line">./b2 --with-python --buildid=2</span><br></pre></td></tr></table></figure></li></ul><p>查看安装目录下lib，有boost-pythonX.so文件，建软连接就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Caffe </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
